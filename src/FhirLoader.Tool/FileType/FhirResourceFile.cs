// -------------------------------------------------------------------------------------------------
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License (MIT). See LICENSE in the repo root for license information.
// -------------------------------------------------------------------------------------------------

using FhirLoader.Tool.FileType;
using FhirLoader.Tool.Helpers;
using Microsoft.Extensions.Logging;
using Newtonsoft.Json;
using Newtonsoft.Json.Linq;

namespace FhirLoader.Tool.FileTypeHandlers
{
    public class FhirResourceFile
    {
        private readonly string _fileName;
        private readonly int _bundleSize;
        private readonly Stream _inputStream;
        private readonly ILogger _logger;

        public FhirResourceFile(Stream inputStream, string fileName, int bundleSize, ILogger logger)
        {
            _fileName = fileName;
            _bundleSize = bundleSize;
            _inputStream = inputStream;
            _logger = logger;
        }

        public IEnumerable<BaseProcessedResource> ConvertToResourceCollection()
        {
            JObject resource;

            // We must read the full file to resolve any refs
            using (StreamReader reader = new StreamReader(_inputStream))
            {
                resource = JObject.Parse(reader.ReadToEnd());
            }

            if (!resource.ContainsKey("resourceType"))
            {
                _logger.LogWarning("File {File} does not contain a valid FHIR resource.", _fileName);
                yield break;
            }

            if (resource["resourceType"]?.ToString() != "Bundle")
            {
                yield return new ProcessedSingleResource
                {
                    ResourceId = resource["id"]?.ToString(),
                    ResourceText = resource.ToString(Formatting.Indented),
                    ResourceFileName = _fileName,
                    ResourceType = resource["resourceType"]?.ToString(),
                };
                yield break;
            }

            try
            {
                SyntheaReferenceResolver.ConvertUUIDs(resource);
            }
            catch
            {
                _logger.LogError($"Failed to resolve references in input file {_fileName}.");
                throw;
            }

            // Convert collection bundles generated by Synthea to batch
            if (resource["type"]!.ToString() == "collection")
            {
                resource["type"] = "batch";
            }

            var bundleResources = resource.SelectTokens("$.entry[*].resource");
            if (bundleResources.Count() <= _bundleSize)
            {
                yield return new ProcessedBundle
                {
                    ResourceFileName = _fileName,
                    ResourceText = resource.ToString(Formatting.Indented),
                    ResourceCount = bundleResources.Count(),
                };
            }
            else
            {
                while (true)
                {
                    var resourceChunk = bundleResources.Take(_bundleSize);
                    bundleResources = bundleResources.Skip(_bundleSize);

                    if (!resourceChunk.Any())
                    {
                        break;
                    }

                    var newBundle = JObject.FromObject(new
                    {
                        resourceType = "Bundle",
                        type = "batch",
                        entry =
                        from r in resourceChunk
                        select new
                        {
                            resource = r,
                            request = new
                            {
                                method = r.SelectToken("id") is not null ? "PUT" : "POST",
                                url = r.SelectToken("id") is not null ? $"{r["resourceType"]}/{r["id"]}" : r["resourceType"],
                            },
                        },
                    });

                    yield return new ProcessedBundle
                    {
                        ResourceFileName = _fileName,
                        ResourceText = newBundle.ToString(Formatting.Indented),
                        ResourceCount = resourceChunk.Count(),
                    };
                }
            }
        }
    }
}
